import { makeTestTask } from '../../m68kTestHelpers';
import { MOVE } from '../MOVE';

const task = makeTestTask({ memoryBufferSize: 100 });

it(`REG`, () => {
  /* REG_TO_REG */
  expect(
    MOVE(
      task,
      [
        '0010000000000000',
        '0110000011111100',
        '0000000000000000',
        '0000001111110000',
        '0000000000000000',
      ],
      { verbose: false }
    ).asm
  ).toEqual('move.l d0,d0');
  //
  expect(
    MOVE(
      task,
      [
        '0010111001001111',
        '0110000011111100',
        '0000000000000000',
        '0000001111110000',
        '0000000000000000',
      ],
      { verbose: false }
    ).asm
  ).toEqual('move.l a7,a7');

  /* REG_TO_ABW */
  expect(
    MOVE(task, [
      '0010000111000000',
      '0000000000000000',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,0.w');
  //
  expect(
    MOVE(task, [
      '0010000111001111',
      '0111111111111111',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l a7,32767.w');

  /* REG_TO_ABL */
  expect(
    MOVE(task, [
      '0010001111000000',
      '0000000000001111',
      '0100001001000000',
      '0110000011111000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,1000000.l');

  /* REG_TO_I */
  expect(
    MOVE(task, [
      '0010000010000000',
      '0110000011111100',
      '0000000000000000',
      '0000001111110000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,(a0)');

  /* REG_TO_IPI */
  expect(
    MOVE(task, [
      '0010000011000000',
      '0110000011111100',
      '0000000000000000',
      '0000001111110000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,(a0)+');

  /* REG_TO_IPD */
  expect(
    MOVE(task, [
      '0010000100000000',
      '0110000011111100',
      '0000000000000000',
      '0000001111110000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,-(a0)');

  /* REG_TO_IWD */
  expect(
    MOVE(task, [
      '0010000101000000',
      '0000000000000001',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,1(a0)');

  /* REG_TO_IWDI */
  expect(
    MOVE(task, [
      '0010000110000000',
      '0001000000000001',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l d0,1(a0,d1)');

  /* */
});

/*************************************************************************/

it(`ABW`, () => {
  /* ABW_TO_REG */
  expect(
    MOVE(task, [
      '0010000000111000',
      '0000000000000000',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 0.w,d0');

  /* ABW_TO_ABW */
  expect(
    MOVE(task, [
      '0010000111111000',
      '0000000001100100',
      '0000000011001000',
      '0110000011111000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,200.w');

  /* ABW_TO_ABL */
  expect(
    MOVE(task, [
      '0010001111111000',
      '0000000001100100',
      '0000000010011000',
      '1001011010000000',
      '0110000011110110',
    ]).asm
  ).toEqual('move.l 100.w,10000000.l');

  /* ABW_TO_I */
  expect(
    MOVE(task, [
      '0010001010111000',
      '0000000001100100',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,(a1)');

  /* ABW_TO_IPI */
  expect(
    MOVE(task, [
      '0010001011111000',
      '0000000001100100',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,(a1)+');

  /* ABW_TO_IPD */
  expect(
    MOVE(task, [
      '0010001100111000',
      '0000000001100100',
      '0110000011111010',
      '0100111001110001',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,-(a1)');

  /* ABW_TO_IWD */
  expect(
    MOVE(task, [
      '0010001101111000',
      '0000000001100100',
      '0000000000000001',
      '0110000011111000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,100(a1)');

  /* ABW_TO_IWDI */
  expect(
    MOVE(task, [
      '0010001110111000',
      '0000000001100100',
      '0000000000010100',
      '0110000011111000',
      '0000000000000000',
    ]).asm
  ).toEqual('move.l 100.w,20(a1,d0)');

  /* */
});

/*************************************************************************/
